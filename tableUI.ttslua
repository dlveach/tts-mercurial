
name = "tableUI"
env = {}
C = {}
GD = {}

--[[ Game loading --]]
function onLoad(saved_data)
  env = Global.getTable("env")
  C = Global.getTable("C")
  if saved_data ~= "" then
    if env.test.trace then log(name..": saved load") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data
    restoreState()
  else
    if env.test.trace then log(name..": fresh load") end
    GD.states = {}
    GD.states.UI = {}
  end
end

--[[ Save game state ]]
function onSave()
  local data_to_save = GD
  local saved_data = JSON.encode(data_to_save)
  if env.test.force_fresh_save then saved_data = "" end
  return saved_data
end

--[[  Wrapper function for saving UI attributes for game restore. ]]
function UI_setAttribute(id, field, value)
  if env.test.trace then log(name..": UI_setAttribute()") end
  assert(type(id) == "string", "id must be a string")
  assert(type(field) == "string", "field must be a string")
  self.UI.setAttribute(id, field, value)
  GD.states.UI[id..":"..field] = value
end

--[[ Restore state during load from saved data. --]]
function restoreState()
  if env.test.trace then log(name..": restoreState()") end
  for key,value in pairs(GD.states.UI) do
    local id = Split(key, ':')[1]
    local field = Split(key, ':')[2]
    self.UI.setAttribute(id, field, value)
  end
end

--[[ External call to set display state of one or more buttons.
  params.type: "button" | "panel" default="button"
  params.panels: {"Heroics" | "Alterations" | "Spells}"
  params.butons: {1 - 6}
  params.state: true|false default=false
--]]
function setState(params)
  if env.test.trace then log(name..": setState()") end
  assert(params, name..": ERROR: setState() missing params")
  local state = false or params.state
  assert(params.panels, name..": ERROR: setState() missing params.panels")
  if params.type == "panel" then
    for _,p in ipairs(params.panels) do
      UI_setAttribute(p.."_buttons_pnl","active",state)
    end
  else
    assert(params.buttons, name..": ERROR: setState() missing params.buttons")
    for _,p in ipairs(params.panels) do
      for _,n in ipairs(params.buttons) do
        UI_setAttribute(p.."_button_"..tostring(n).."_pnl","active",state)
      end
    end
  end
end

--[[ External call to hide all buttons in specified buttons.
  params.panels: (opt) {"Heroics" | "Alterations" | "Spells}"  Default=all
--]]
function hideAllButtons(params)
  if env.test.trace then log(name..": clearState()") end
  local panels
  if params and params.panels then
    panels = params.panels
  else
    panels = {"Heroics","Alterations","Spells"}
  end
  for _,p in ipairs(panels) do
    for n=1,6 do
      UI_setAttribute(p.."_button_"..tostring(n).."_pnl","active",false)
    end
  end
end
