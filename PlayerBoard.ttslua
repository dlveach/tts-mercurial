mana_loc = {}
mana_loc[1] = { 0.325848, 0, -0.777266 }
mana_loc[2] = { 0.642849, 0, -0.770351 }
mana_loc[3] =  { 0.943852, 0, -0.758921 }
mana_loc[4] = { 1.237281, 0, -0.76304 }
mana_loc[5] = { 1.558671, 0, -0.756527 }
mana_loc[6] = { 0.293719, 0, -0.438221 }
mana_loc[7] = { 0.612091, 0, -0.443802 }
mana_loc[8] = { 0.915044, 0, -0.441325 }
mana_loc[9] = { 1.252831, 0, -0.443335 }
mana_loc[10] = { 1.559581, 0, -0.440888 }
acuity_loc = {}
acuity_loc[1] = { 0.327416, 0, -0.105233 }
acuity_loc[2] = { 0.602913, 0, -0.098424 }
acuity_loc[3] = { 0.937014, 0, -0.092739 }
acuity_loc[4] = { 1.243617, 0, -0.102063 }
acuity_loc[5] = { 1.558407, 0, -0.088233 }
acuity_loc[6] = { 0.289897, 0, 0.210014 }
acuity_loc[7] = { 0.612284, 0, 0.215907 }
acuity_loc[8] = { 0.926764, 0, 0.214188 }
acuity_loc[9] = { 1.218278, 0, 0.220292 }
acuity_loc[10] = { 1.567567, 0, 0.222189 }

player_color = ""
artifacts_deck = "e52f60"
env = {}

function onLoad()
  env = Global.getTable("env")
  if env.test.trace then log("Player Board " .. self.getName() .. ": onLoad()") end
  local block = getObjectFromGUID(block_guid)
  assert (block)  
  block.UI.setAttribute("block_text_id", "text", self.getName())
  if not(env.test.in_dev) then
    self.setLock(true)
    self.interactable = false
    block.setLock(true)
    block.interactable = false
  end
end

function nextPlayerBtn(player, mouse, id)
  if env.test.trace then log(self.getName() .. ": nextPlayerBtn()") end
  if player.color == player_color then
    self.UI.setAttribute("next_player_pnl", "active", "false")
    self.UI.setAttribute("cleanup_pnl", "active", "false")
    Global.call("setNextPlayer")
  else
    broadcastToColor("Player " .. player.color .. ": " .. self.getName() .. " is not your class.", player.color)
  end
end

function cleanupBtn(player, mouse, id)
  if env.test.trace then log(self.getName() .. ": cleanupBtn()") end
  if player.color == player_color then

    log("TODO: cleanup player board")

  else
    broadcastToColor("Player " .. player.color .. ": " .. self.getName() .. " is not your class.", player.color)
  end
end

function classSelectBtn(player, mouse, id)
  if env.test.trace then log(self.getName() .. ": classSelectBtn() player " .. player.color) end
  Global.call("setPlayerClass",{
    ["player"]=player.color, 
    ["guid"]=self.getGUID()})
end

function setPlayer(params)
  if env.test.trace then log(self.getName() .. ": setPlayer()") end
  assert(params.player)
  player_color = params.player
  self.UI.setAttribute("class_select_pnl", "active", "false")
  log(self.getName() .. " class assigned to player " .. player_color)
  local deck = getObjectFromGUID(start_deck)
  card_count = #deck.getObjects()
  deck.deal(card_count, player_color)
  deck = getObjectFromGUID(artifacts_deck)
  deck.deal(artifact_cards, player_color)
  if take_myst_rune then
    --get the myst rune and move it to Mystcaller
    local guid = Global.call("getMystRuneGuid")
    local pos = self.getPosition()
    pos[1] = pos[1] - 4
    local rune = getObjectFromGUID(guid)
    rune.setPosition(pos)
  end
  local block = getObjectFromGUID(block_guid)
  assert (block)
  block.setColorTint(player_color)
end

function enableClassSelectBtn()
  if env.test.trace then log(self.getName() .. ": enableClassSelectBtn()") end
  self.UI.setAttribute("class_select_pnl", "active", "true")
end

function enableActivePlayer()
  if env.test.trace then log(self.getName() .. ": enableActivePlayer()") end
  self.UI.setAttribute("next_player_pnl", "active", "true")
  self.UI.setAttribute("cleanup_pnl", "active", "true")
end

function setupBoard()
  if env.test.trace then log(self.getName() .. ": setupBoard()") end
  if player_color == "" then
    --unasigned, delete this board
    local pos = self.getPosition()
    local hits = Physics.cast({
      origin       = pos,
      direction    = {1,0,0},
      type         = 2,
      size         = {4,4,4},
      max_distance = 5,
      debug        = false,
    })
    if hits ~= nil then
      for _,h in pairs(hits) do
        if string.match(h.hit_object.tag, "Dice") then
          h.hit_object.destruct()
        elseif string.match(h.hit_object.tag, "Generic") then
          h.hit_object.destruct()
        elseif string.match(h.hit_object.tag, "Tile") then
          h.hit_object.destruct()
        end
      end
    end
    local block = getObjectFromGUID(block_guid)
    if block then 
      block.setColorTint("Grey")
      block.UI.setAttribute("block_panel", "active", "false")
      --Mystcaller hack
      if self.getName() == "Mystcaller" then
        block.destruct() 
        getObjectFromGUID(start_deck).destruct()
        getObjectFromGUID(mystcaller_guid).destruct()
      end
    end 
  end  
end


--[[ Get obj position (DEVELOPMENT ONLY) ]]
function saveLocalPosition(params)  
  local o = getObjectFromGUID(params.guid)
  local world_pos = o.getPosition()
  local local_pos = self.positionToLocal(world_pos)
  Notes.setNotes(tostring(local_pos))
end