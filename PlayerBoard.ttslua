--Board relative positions
heroics_local_pos = {}
heroics_local_pos[1] = { -0.693375, 0.063605, 0.22282 }
heroics_local_pos[2] = { -0.697867, 0.063605, 0.019222 }
heroics_local_pos[3] = { -0.692098, 0.063605, -0.187761 }
heroics_local_pos[4] = { -0.700036, 0.063605, -0.387944 }
heroics_local_pos[5] = { -0.695988, 0.063605, -0.591511 }
spells_local_pos = {}
spells_local_pos[1] = { 1.547296, 0.063605, 0.361437 }
spells_local_pos[2] = { 1.133304, 0.063605, 0.358452 }
spells_local_pos[3] = { 0.719295, 0.063605, 0.3606 }
spells_local_pos[4] = { 0.305298, 0.063605, 0.359327 }
spells_local_pos[5] = { -0.110406, 0.063605, 0.356337 }
link_spells_local_pos = {}
link_spells_local_pos[1] = { 1.548386, 0.063605, 1.119303 }
link_spells_local_pos[2] = { 1.136083, 0.063605, 1.123167 }
link_spells_local_pos[3] = { 0.720385, 0.063605, 1.118466 }
link_spells_local_pos[4] = { 0.304666, 0.063605, 1.120609 }
link_spells_local_pos[5] = { -0.109338, 0.063605, 1.121045 }
enchantment_spells_local_pos = {}
enchantment_spells_local_pos[1] = { -0.57809, 0.063605, 1.123024 }
enchantment_spells_local_pos[2] = { -1.014327, 0.063605, 1.121682 }
enchantment_spells_local_pos[3] = { -1.450565, 0.063605, 1.12034 }
spell_discards_local_pos = { -1.275969, 0.063605, -0.579609 }
arcanas_local_pos = { -1.276696, 0.063605, 0.212467 }
used_alterations_local_pos = { -0.112517, 0.063605, -0.625641 }
card_drop_local_pos = { 1.386483, 0.263604, -0.623906 }

env = {}
C = {}
GD = {}

--[[ Game loading. ]]
function onLoad(saved_data)
  env = Global.getTable("env")
  C = Global.getTable("C")
  self.setLock(true)
  if saved_data ~= "" then
    if env.test.trace then log("Player Board " .. board_name .. " saved load") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data
    -- restoreBoardState()
    if GD.initialized then
      self.tooltip = false        --TODO: needed? toggle survives save/load?
      self.interactable = false   --TODO: needed? toggle survives save/load?
      --reactivate UI panels
      self.UI.setAttribute("gross_restore_panel", "active", "true")
      self.UI.setAttribute("gross_ruin_panel", "active", "true")
      self.UI.setAttribute("net_restore_panel", "active", "true")
      self.UI.setAttribute("net_ruin_panel", "active", "true")
      self.UI.setAttribute("total_myst_panel", "active", "true")
      self.UI.setAttribute("dice_restore_panel", "active", "true")
      self.UI.setAttribute("dice_ruin_panel", "active", "true")
      self.UI.setAttribute("acuity_restore_panel", "active", "true")
      self.UI.setAttribute("acuity_ruin_panel", "active", "true")
      -- self.UI.setAttribute("edit_acuity_pnl", "active", "true")
      self.UI.setAttribute("prestige_panel", "active", "true")
      self.UI.setAttribute("yellow_sigils_panel", "active", "true")
      self.UI.setAttribute("green_sigils_panel", "active", "true")
      self.UI.setAttribute("red_sigils_panel", "active", "true")
      self.UI.setAttribute("blue_sigils_panel", "active", "true")
      self.UI.setAttribute("wild_sigils_panel", "active", "true")
    end
  else
    if env.test.trace then log("Player Board " .. board_name .. " fresh load") end
    if env.test.debug then self.tooltip = true end
    self.setLock(true)
    self.interactable = true
    GD.initialized = false
  end
end

--[[ Save game state ]]
function onSave()
  local data_to_save = GD
  local saved_data = JSON.encode(data_to_save)
  if env.test.force_fresh_save then saved_data = "" end
  return saved_data
end

--[[ Called from Global during class board selection after it
Initialize state and UI stuffs.
--]]
function initialize(pdata)
  if env.test.trace then log(board_name..":initialize()") end
  assert(pdata,board_name..":setPlayer() missing player data")
  GD.player_color = pdata.player_color
  GD.initialized = true
  self.tooltip = false
  self.interactable = false
  self.UI.setAttribute("gross_restore_panel", "active", "true")
  self.UI.setAttribute("gross_ruin_panel", "active", "true")
  self.UI.setAttribute("net_restore_panel", "active", "true")
  self.UI.setAttribute("net_ruin_panel", "active", "true")
  self.UI.setAttribute("total_myst_panel", "active", "true")
  self.UI.setAttribute("dice_restore_panel", "active", "true")
  self.UI.setAttribute("dice_ruin_panel", "active", "true")
  self.UI.setAttribute("acuity_restore_panel", "active", "true")
  self.UI.setAttribute("acuity_ruin_panel", "active", "true")
  self.UI.setAttribute("prestige_panel", "active", "true")
  self.UI.setAttribute("yellow_sigils_panel", "active", "true")
  self.UI.setAttribute("green_sigils_panel", "active", "true")
  self.UI.setAttribute("red_sigils_panel", "active", "true")
  self.UI.setAttribute("blue_sigils_panel", "active", "true")
  self.UI.setAttribute("wild_sigils_panel", "active", "true")
end

--[[ Called from Global to refresh UI.
Player data table for update is passed as a parameter.
--]]
function updateUI(pdata)
  if env.test.trace then log(board_name..":updateUI()") end
  assert(pdata,board_name..":setPlayer() missing player data")
  self.UI.setAttribute("active_player_pnl", "active", pdata.active)
  self.UI.setAttribute("gross_restore_txt", "text", tostring(pdata.spell_power.gross_restore))
  self.UI.setAttribute("gross_ruin_txt", "text", tostring(pdata.spell_power.gross_ruin))
  self.UI.setAttribute("net_restore_txt", "text", tostring(pdata.spell_power.net_restore))
  self.UI.setAttribute("net_ruin_txt", "text", tostring(pdata.spell_power.net_ruin))
  self.UI.setAttribute("total_myst_txt", "text", tostring(pdata.spell_power.myst))
  self.UI.setAttribute("dice_restore_txt", "text", tostring(pdata.spell_power.dice.restore))
  self.UI.setAttribute("dice_ruin_txt", "text", tostring(pdata.spell_power.dice.ruin))
  self.UI.setAttribute("acuity_restore_txt", "text", tostring(pdata.spell_power.acuity.restore))
  self.UI.setAttribute("acuity_ruin_txt", "text", tostring(pdata.spell_power.acuity.ruin))
  self.UI.setAttribute("prestige_txt", "text", tostring(pdata.prestige))
  for s,n in pairs(pdata.sigils) do
    local txt
    if s == "wild" then
      if n > 0 then txt = tostring(n)
      else txt = "-" end
    else txt = tostring(n).." ("..tostring(pdata.alt_sigils[s])..")" end
    self.UI.setAttribute(s.."_sigils_txt", "text", txt)
  end
  if pdata.endgame then
    self.UI.setAttribute("edit_acuity_pnl", "active",true)
    self.UI.setAttribute("active_player_pnl", "active",false)
    self.UI.setAttribute("take_alterations_pnl","active",false)
    self.UI.setAttribute("cast_spell_pnl","active",pdata.active)
    self.UI.setAttribute("player_done_pnl","active",false)
    return
  end
  if pdata.active then
    if pdata.casting or
        pdata.alteration_action ~= nil or
        pdata.mystrune_action ~= nil or
        pdata.spell_cost ~= nil then
      self.UI.setAttribute("edit_acuity_pnl", "active",false)
      self.UI.setAttribute("take_alterations_pnl","active",false)
      self.UI.setAttribute("cast_spell_pnl","active",false)
      self.UI.setAttribute("player_done_pnl","active",false)
    else
      self.UI.setAttribute("edit_acuity_pnl", "active",true)
      self.UI.setAttribute("cast_spell_pnl","active", pdata.activity == 0)
      local state = indexOf(pdata.actions.take,"any") > 0
      if not(state) then state = state and indexOf(pdata.actions.take,"spell") > 0 end
      self.UI.setAttribute("player_done_pnl","active",not(state))
      state = state and getUsedAlterations() ~= nil  --TODO: avoid Physics, use somethign in pdata
      self.UI.setAttribute("take_alterations_pnl","active",state)
    end
  else
    self.UI.setAttribute("edit_acuity_pnl", "active",true)
    self.UI.setAttribute("active_player_pnl", "active",false)
    self.UI.setAttribute("take_alterations_pnl","active",false)
    self.UI.setAttribute("cast_spell_pnl","active",false)
    self.UI.setAttribute("player_done_pnl","active",false)
  end
end

--[[ Process a used Alteration card.
Called from Global on card drop outside of hand.
--]]
function placeUsedAlterationCard(params)
  assert(params, board_name..":placeUsedAlterationCard(): missing params")
  if env.test.trace then log(board_name..":playAlteration() "..tostring(params.guid)) end
  local card = getObjectFromGUID(params.guid)
  assert(card, board_name..":placeusedAlterationCard(): missing card object, "..params.guid)
  local used = self.positionToWorld(used_alterations_local_pos)
  used.y = used.y + 3
  card.setLock(false)
  if not(card.is_face_down) then card.flip() end
  card.setPosition(used)    --TODO: check this      --TODO: check this
end

--[[ Called from Global after all players have selected a class.
Also may be called during game restore.
If this board is unnassigned, desroy it.
--]]
function cleanupBoard()
  if env.test.trace then log(board_name .. ": cleanupBoard()") end
  if not(GD.initialized) then self.destruct() end
end

--[[ Place a newly acquired spell card.
  TODO: algorithm to determine best spot.
--]]
function placeSpellCard(params)
  assert(params, board_name..":placeSpellCard(): missing params")
  if env.test.trace then log(board_name..":placeSpellCard() "..tostring(params.guid)) end

  log("TODO: figure out best place to put new spell card")

  --Drop on class board, Global will call locateSpell to put it in final location.
  local card = getObjectFromGUID(params.guid)
  assert(card, board_name..":placeSpellCard(): failed to locate card for guid "..tostring(params.guid))
  card.setLock(false)
  if card.is_face_down then card.flip() end
  local pos = self.positionToWorld(card_drop_local_pos)
  pos.y = pos.y + 3
  card.setPosition(pos)
end

--[[ Called from global on spell card drop by player for this board.
    Place the card in the closest valid Spell location.
    Then update the map and return it.
--]]
function locateSpell(params)
  if env.test.trace then log(board_name .. ": locateSpell()") end
  if env.test.debug then log(params) end
  local card = getObjectFromGUID(params.guid)
  assert(card, board_name.." locateSpell() WARN: Player dropped card "..params.guid.." but object is nil now.")
  local map = simpleDeepCopy(params.map)
  local cdata = params.card_data
  local spots = spells_local_pos
  local type = "base_spells"
  if cdata.enchant ~= nil then
    spots = enchantment_spells_local_pos
    type = "enchant_spells"
  elseif cdata.link ~= nil then
    spots = link_spells_local_pos
    type = "link_spells"
  end
  local index = 0
  local shortest = nil
  local pos = Vector(self.positionToLocal(card.getPosition()))
  for i,spot in ipairs(spots) do
    if type == "link_spells" or map[type][i].guid == "" then
      local dist = Vector.sqrDistance(pos, Vector(spot))
      -- log("dist for spot "..tostring(i).." is "..tostring(dist))
      if shortest then
        if dist < shortest then
          shortest = dist
          index = i
        end
      else
        -- log("set shortest first time at spot "..tostring(i))
        shortest = dist
        index = i
      end
    end
  end
  assert(index > 0, board_name..":locateSpell() failed to find a valid spell card location")
  card.setPosition(self.positionToWorld(spots[index]))
  if type == "link_spells" then
    table.insert(map.link_spells[index], {guid=card.getGUID(),id=cdata.id})
  else
    map[type][index].guid = card.getGUID()
    map[type][index].id = cdata.id
  end
  -- log("locateSpell() returning")
  return map
end

--[[ Place a newly acquired Heroic. --]]
function placeHeroicCard(params)
  assert(params, board_name..":placeHeroicCard(): missing params")
  if env.test.trace then log(board_name..":placeHeroicCard() "..tostring(params.guid)) end
  if env.test.debug then log(params) end
  local index = params.index
  assert(index, "")
  local pos = self.positionToWorld(heroics_local_pos[index])
  pos.y = 1.5
  local card = getObjectFromGUID(params.guid)
  assert(card, board_name..":placeHeroicCard():failed to locate obj for guid "..tostring(params.guid))
  card.setLock(false)
  if card.is_face_down then card.flip() end
  card.setPosition(pos)
  Wait.frames(function()
    Wait.condition(function() card.setLock(true) end, function() return card.resting end)
  end, 1)
end

--[[ Place a cast spell card on the spell discard location. --]]
function placeCastSpell(params)
  assert(params, board_name..":placeCastSpell(): missing params")
  if env.test.trace then log(board_name..":placeCastSpell() "..tostring(params.guid)) end
  if env.test.debug then log(params) end
  local pos = self.positionToWorld(spell_discards_local_pos)
  pos.y = 3
  local spell = getObjectFromGUID(params.guid)
  assert(spell, board_name..":placeCastSpell():failed to locate obj for guid "..tostring(params.guid))
  spell.setLock(false)
  if not(spell.is_face_down) then spell.flip() end
  spell.setPosition(pos)
end

--[[ Place a deck of link spells in the spell discard location.
  Returns a list of card IDs placed.
--]]
function placeLinkSpellDeck(params)
  assert(params, board_name..":placeLinkSpellDeck(): missing params")
  if env.test.trace then log(board_name..":placeLinkSpellDeck() "..tostring(params.index)) end
  if env.test.debug then log(params) end
  local slot = self.positionToWorld(link_spells_local_pos[params.index])
  local obj = findObject(slot, {"Deck","Card"}, {1,1,1}, env.test.debug)
  assert(obj, board_name..":placeLinkSpellDeck(): no card/deck object at index "..params.index)
  local discard_pos = self.positionToWorld(spell_discards_local_pos)
  discard_pos.y = 3
  local list = {}
  if obj.tag == "Deck" then
    for _,c in ipairs(obj.getObjects()) do
      table.insert(list, tonumber(c.gm_notes))
    end
  elseif obj.tag == "Card" then
    table.insert(list, tonumber(obj.getGMNotes()))
  else
    log("WARN: "..board_name..":placeLinkSpellDeck(): unexpected obj type at index "..params.index)
  end
  if #list > 0 then
    if not(obj.is_face_down) then obj.flip() end
    obj.setPosition(discard_pos)
  end
  return list
end

--[[ Place a newly acquired Arcana. --]]
function placeArcana(params)
  assert(params, board_name..":placeArcana(): missing params")
  if env.test.trace then log(board_name..":placeArcana() "..tostring(params.guid)) end
  if env.test.debug then log(params) end
  local pos = self.positionToWorld(arcanas_local_pos)
  pos.y = 3
  local arcana = getObjectFromGUID(params.guid)
  assert(arcana, board_name..":placeArcana():failed to locate obj for guid "..tostring(params.guid))
  arcana.setLock(false)
  if arcana.is_face_down then arcana.flip() end
  arcana.setRotation(Vector(0,270,0))
  arcana.setPosition(pos)
end

--[[ Place the specified myst rune relative to this board. ]]
function placeMystRune(params)
  assert(params, board_name..":placeMystRune(): missing params")
  if env.test.trace then log(board_name..":placeArcana() "..tostring(params.guid)) end
  if env.test.debug then
    log(params)
    log(myst_rune_world_location)
  end
  local rune = getObjectFromGUID(params.guid)
  assert(rune, board_name..":placeMystRune():failed to locate obj for guid "..tostring(params.guid))
  rune.setLock(false)
  rune.setPosition(myst_rune_world_location)
  Wait.frames(function() rune.setLock(true) end, 1)
end

--[[ Called from Global to get used alterations deck/card if any.
    Returns object (card or deck).  Returns nil if nothing there.
--]]
function getUsedAlterations()
  if env.test.trace then log(board_name..":getUsedAlterations()") end
  local pos = self.positionToWorld(used_alterations_local_pos)
  local result = findObject(pos, {"Deck","Card"}, {1,1,1}, env.test.debug)
  if env.test.debug then log(result) end
  return result
end

--[[ Handler for the edit acuity spell power dialog.
Dialog is not persistent across save/restore.
Gets data from Global on activation.
Local object UI handler for dialog buttons then update Global data when done.
--]]
function editAcuityHandler(player, button, id)
  if env.test.debug then log(board_name..":editAcuityBtn() "..player.color..", "..id) end
  if player.color ~= GD.player_color then return end
  if id == "edit_acuity_btn" then
    local acuity_spell = Global.call("getAcuitySpell",player.color)
    --setup dialog data struct (not persistent)
    dlg = {
      player_color = player.color,
      acuity = acuity_spell.acuity,
      restore = acuity_spell.restore,
      ruin = acuity_spell.ruin,
    }
    if dlg.acuity < 3 then
      if dlg.restore + dlg.ruin == 0 then
        if env.test.debug then log("not enough acuity") end
        return
      end
    end
    self.UI.setAttribute("edit_acuity_pnl","active",false)
    self.UI.setAttribute("acuity_edit_pnl","active",true)
  elseif id == "dec_restore_acuity_btn" then
    if dlg.restore == 0 then return end
    dlg.acuity = dlg.acuity + 3
    dlg.restore = dlg.restore - 1
  elseif id == "inc_restore_acuity_btn" then
    if dlg.acuity < 3 then return end
    dlg.acuity = dlg.acuity - 3
    dlg.restore = dlg.restore + 1
  elseif id == "dec_ruin_acuity_btn" then
    if dlg.ruin == 0 then return end
    dlg.acuity = dlg.acuity + 4
    dlg.ruin = dlg.ruin - 1
  elseif id == "inc_ruin_acuity_btn" then
    if dlg.acuity < 4 then return end
    dlg.acuity = dlg.acuity - 4
    dlg.ruin = dlg.ruin + 1
  elseif id == "cancel_acuity_btn" then
    acuity_edit = {}
    self.UI.setAttribute("acuity_edit_pnl","active",false)
    self.UI.setAttribute("edit_acuity_pnl","active",true)
    return
  elseif id == "done_acuity_btn" then
    Global.call("updateAcuitySpell",dlg)
    self.UI.setAttribute("acuity_edit_pnl","active",false)
    self.UI.setAttribute("edit_acuity_pnl","active",true)
    return
  end
  self.UI.setAttribute("available_acuity_txt","text",tostring(dlg.acuity))
  self.UI.setAttribute("restore_acuity_txt","text",tostring(dlg.restore))
  self.UI.setAttribute("ruin_acuity_txt","text",tostring(dlg.ruin))
end



--/////////// TODO: move this stuff to Global and/or remove OBE code

--[[ TODO: is this OBE???  Called from Global when this play
      TODO: check this, maybe just activate buttons with player data?
--]]
function enableActivePlayer(state)
  --   local state = state and true
  --   if env.test.trace then log(board_name .. ": enableActivePlayer() "..tostring(state)) end
  --   local color_bar = getObjectFromGUID(C.guids.color_bars[GD.board.player_position])
  --   UI_setAttribute("next_player_pnl", "active", false)
  --   UI_setAttribute("cleanup_pnl", "active", state)
  --   if state then
  --     color_bar.setInvisibleTo({})
  --     color_bar.UI.setAttribute("block_panel", "active", "true")
  --   else
  --     color_bar.setInvisibleTo(Player.getColors())
  --     color_bar.UI.setAttribute("block_panel", "active", "false")
  --   end
  --   GD.board.active = state
end


--[[ Calculate current score adn update display --]]   --TODO: leverage what I can for Global
function updateScore()
  --   if env.test.trace then log(board_name .. ": updateScore()") end
  --   local sigils = { red = 0, blue = 0, green = 0, yellow = 0 }
  --   local heroics_score = 0
  --   local prestige_score = 0
  --   local arcanas_score = 0
  --   local sigil_score = 0
  --   -- GD.board.scoring.spells = {}
  --   GD.board.scoring.heroics = {}
  --   GD.board.scoring.arcanas = {}
  --   local heroics_data = Global.getTable("heroics")
  --   --Herocis scoring
  --   local heroics_zone = getObjectFromGUID(GD.board.heroics_zone)
  --   local heroics_count = 0
  --   if heroics_zone != nil then
  --     local heroics = heroics_zone.getObjects()
  --     for _,h in pairs(heroics) do
  --       if h.hasTag("Heroic") then
  --         heroics_count = heroics_count + 1
  --         if env.test.debug then log("---  Heroic card id: "..h.getGMNotes()) end
  --         local data = heroics_data[tonumber(h.getGMNotes())]
  --         if data then
  --           heroics_score = heroics_score + data.vp
  --           for _,sigil in ipairs(data.sigils) do sigils[sigil] = sigils[sigil] + 1 end
  --         else
  --           log("ERROR: "..board_name..":updateScore(): no data found for Heroic card, "..h.getGUID())
  --         end
  --       else
  --         log("WARN: "..board_name..":updateScore(): ignoring unknown object found in Heroics stack, "..h.getGUID())
  --       end
  --     end
  --   else
  --     log("ERROR: "..board_name..":heroics zone not found")
  --   end
  --   if env.test.debug then log("Heroics score: "..heroics_score) end
  --   GD.board.scoring.values.heroics = heroics_score
  --   GD.board.heroics_count = heroics_count
  --   --count sigils on alteration cards in hand
  --   local hand = Player[GD.board.player_color].getHandObjects(index)
  --   local card_data = Global.getTable("alterations")
  --   for _,c in ipairs(hand) do
  --     local data = card_data[tonumber(c.getGMNotes())]
  --     if data then
  --       for _,sigil in ipairs(data.sigils) do
  --         sigils[sigil] = sigils[sigil] + 1
  --       end
  --     end
  --   end
  --   --count sigils on alteration cards in spent pile
  --   local pos = self.positionToWorld(used_alterations_local_pos)
  --   local spent = findObject(pos, {"Deck", "Card"}, env.test.debug)
  --   if spent then
  --     if spent.tag == "Deck" then
  --       for _,c in ipairs(spent.getObjects()) do
  --         local data = card_data[tonumber(c.gm_notes)]
  --         if data then
  --           for _,sigil in ipairs(data.sigils) do
  --             sigils[sigil] = sigils[sigil] + 1
  --           end
  --         end
  --       end
  --     elseif spent.tag == "Card" then
  --       local data = card_data[tonumber(spent.getGMNotes())]
  --       if data then
  --         for _,sigil in ipairs(data.sigils) do
  --           sigils[sigil] = sigils[sigil] + 1
  --         end
  --       end
  --     end
  --   end
  --   --Add sigil for player class board
  --   if board_sigil == "wild" then
  --     -- Will at least make a pair, worth 1.  Otherwise adds 1 more to one set of 3 or more.  So always adds 1.
  --     sigil_score = sigil_score + 1
  --   else
  --     sigils[board_sigil] = sigils[board_sigil] + 1
  --   end
  --   --Sigil scoring
  --   -- log(sigils)
  --   for sigil,count in pairs(sigils) do
  --     GD.board.sigils[sigil] = count
  --     UI_setAttribute(sigil.."_sigils_text", "text", tostring(count))
  --     c = math.modf(count/3)
  --     if c > 0 then
  --       sigil_score = sigil_score + (3 * c)
  --     else
  --       c = math.modf(count/2)
  --       if c > 0 then
  --         sigil_score = sigil_score + c
  --       end
  --     end
  --   end
  --   -- log("Sigil score: "..sigil_score)
  --   GD.board.scoring.values.sigils = sigil_score
  --   --Prestige token scoring
  --   local prestige_zone = getObjectFromGUID(GD.board.prestige_zone)
  --   for _,o in pairs(prestige_zone.getObjects()) do
  --     if o.hasTag("Prestige") then
  --       prestige_score = prestige_score + 1
  --     end
  --   end
  --   -- log("Prestige score: "..prestige_score)
  --   GD.board.scoring.values.prestige = prestige_score
  --   --Arcana scoring
  --   local spell_cards = {}
  --   local spells = Global.getTable("spells")
  --   local arcanas = {}
  --   local z = getObjectFromGUID(GD.board.spell_arcana_zone)
  --   for _,o in pairs(z.getObjects()) do
  --     if o.hasTag("Spell") then
  --       if o.tag == "Deck" then
  --         for _,c in pairs(o.getObjects()) do
  --           spell_cards[c.guid] = spells[tonumber(c.gm_notes)]
  --           -- GD.board.scoring.spells[c.guid] = c.gm_notes
  --         end
  --       else
  --         spell_cards[o.getGUID()] = spells[tonumber(o.getGMNotes())]
  --         -- GD.board.scoring.spells[o.getGUID()] = o.getGMNotes()
  --       end
  --     elseif o.hasTag("Arcana") then
  --       table.insert(arcanas, o)
  --       GD.board.scoring.arcanas[o.getGUID()] = o.getName()
  --     else
  --       log("WARN: ignoring object "..o.getGUID().." in spell/arcana pile.")
  --     end
  --   end
  --   log("found "..sizeOf(spell_cards).." spell cards")
  --   log("found "..#arcanas.." arcana cards")
  --   local arcana_data
  --   for _,arcana in pairs(arcanas) do
  --     if arcana.is_face_down then
  --       arcana_data = C.arcanas[arcana.getGUID()].face_down
  --     else
  --       arcana_data = C.arcanas[arcana.getGUID()].face_up
  --     end
  --     log("Scoring arcana data: ")
  --     log(arcana_data)
  --     local score = arcana_data.base_vp
  --     local count = 0
  --     local bonus = arcana_data.bonus
  --     if bonus.spell_type == "aether_mod" then
  --       for _,card in pairs(spell_cards) do
  --         if card.aether_mod then
  --           count = count + 1
  --         end
  --       end
  --     elseif bonus.spell_type == "not_aether" then
  --       for _,card in pairs(spell_cards) do
  --         if not(card.aether_mod) then
  --           count = count + 1
  --         end
  --       end
  --     elseif bonus.spell_type == "slot_count" then
  --       for _,card in pairs(spell_cards) do
  --         if card.slots >= 4 then
  --           count = count + 1
  --         end
  --       end
  --     else
  --       for _,card in pairs(spell_cards) do
  --         if bonus.spell_type == "any" or contains(card.dice, bonus.spell_type) then
  --           count = count + 1
  --         end
  --       end
  --     end
  --     log("Number spells matching arcana "..arcana.getName().." condition = "..count..":"..tostring(bonus.spell_type))
  --     local n = math.modf(count/bonus.count)
  --     score = score + n * arcana_data.vp
  --     log(arcana.getName().." score is "..tostring(score))
  --     arcanas_score = arcanas_score + score
  --   end
  --
  --   log("total arcana score: "..arcanas_score)
  --   GD.board.scoring.values.arcanas = arcanas_score
  --
  --   log("-------------TODO: fix arcana scoring to final rules -------------------")
  --
  --   local score = heroics_score + sigil_score + prestige_score + arcanas_score
  --   GD.board.scoring.total_score = score
  --   UI_setAttribute("score_text_id", "text", tostring(score))
  --   Global.call("updateHUD")    --TODO: move to global
end

--[[ ***** DEVELOPMENT ONLY UTILS --]]

-- function setGMNote(card, data)
--   assert(card)
--   assert(data)
--   assert(type(data) == "table")
--   assert(card.hasTag("Spell"))
--   card.setGMNotes(JSON.encode_pretty(variable)(data))
-- end

function saveLocalPosition(params)
  local o = getObjectFromGUID(params.guid)
  local world_pos = o.getPosition()
  local local_pos = self.positionToLocal(world_pos)
  Notes.setNotes(tostring(local_pos))
end

require("tts-lib/utils")
