

env = {}
env.version = "1.0"
env.test= {}
--env.test.test_players = {"Green", "Blue", "Yellow", "White"}
--env.test.test_players = {"Yellow", "White"}
env.test.auto_switch = false
env.test.in_dev = false
env.test.trace = true
env.test.debug = true
env.test.force_fresh_save = false
env.game = {}
env.game.player_table_order = {"White", "Yellow", "Green", "Blue"}
env.game.verbose = true

C = {}
C.guids = {}
C.guids.board_zones = {}
C.guids.board_zones[1] = "60521c"
C.guids.board_zones[2] = "bfde3d"
C.guids.board_zones[3] = "147962"
C.guids.board_zones[4] = "e02b04"
C.guids.color_bars = {}
C.guids.color_bars[1] = "4e97a8"
C.guids.color_bars[2] = "fcab5e"
C.guids.color_bars[3] = "3a88ad"
C.guids.color_bars[4] = "277168"
C.guids.player_boards = {}
C.guids.player_boards.mystcaller = "be09eb"
C.guids.player_boards.elementalist = "e47526"
C.guids.player_boards.archanist = "625f56"
C.guids.player_boards.enchanter = "69525a"
C.guids.player_boards.chaosmancer = "d453e1"
C.guids.spell_deck = "9e01c6"
C.guids.alterations_deck = "2d1923"
C.guids.heroics_deck = "25e4a6"
C.guids.artifacts_deck = "675a94"
C.guids.mana_bag = "a39f6e"
C.guids.acuity_bag = "5561d3"
C.guids.prestige_bag = "9db97c"
C.guids.dice_bag = "bf3a6e"
C.guids.myst_rune_1 = "3444cf"
C.guids.myst_rune_2 = "8b61f9"
C.guids.fill_alterations_btn = "c19ef3"
C.guids.fill_spells_btn = "6e7155"
--[[ arcana data for scoring --]]
C.arcanas = {}
C.arcanas["8f529c"] = {
  face_up = {
    name = "Fire Lizard",
    reward = {
      vp = 1,
      spell_type = "fire",
      count = 2
    }
  },
  face_down = {
    name = "Water Dragon",
    reward = {
      vp = 1,
      spell_type = "water",
      count = 2
    }
  }
}
C.arcanas["5f944b"] = {
  face_up = {
    name = "Mystic Cat",
    reward = {
      vp = 1,
      spell_type = "any",
      count = 4
    }
  },
  face_down = {
    name = "Phoenix",
    reward = {
      vp = 1,
      spell_type = "slot_count",
      slot_count = 4,
      count = 2
    }
  }
}
C.arcanas["a94aad"] = {
  face_up = {
    name = "Aether Griffon",
    reward = {
      vp = 1,
      spell_type = "aether_mod",
      count = 2
    }
  },
  face_down = {
    name = "Myst Owl",
    reward = {
      vp = 1,
      spell_type = "not_aether",
      count = 3
    }
  }
}
C.pos = {}
C.rot = {}
C.pos.spells = {}
C.pos.spells[1] = { -3.855699, 0.973605, -9.672857 }
C.pos.spells[2] = { -1.83932, 0.973605, -9.686527 }
C.pos.spells[3] = { 0.153882, 0.973605, -9.663352 }
C.pos.spells[4] = { 2.135497, 0.973605, -9.674938 }
C.pos.spells[5] = { 4.140288, 0.973605, -9.663352 }
C.pos.spells[6] = { 6.133489, 0.973605, -9.674938 }
C.pos.alterations = {}
C.pos.alterations[1] = { -3.839974, 0.973605, -3.746139 }
C.pos.alterations[2] = { -1.83932, 0.973605, -3.776452 }
C.pos.alterations[3] = { 0.16547, 0.973605, -3.788041 }
C.pos.alterations[4] = { 2.147085, 0.973605, -3.78804 }
C.pos.alterations[5] = { 4.151876, 0.973605, -3.788041 }
C.pos.alterations[6] = { 6.145079, 0.973605, -3.788041 }
C.pos.heroics = {}
C.pos.heroics[1] = { -3.834427, 0.973605, 2.330439 }
C.pos.heroics[2] = { -1.863333, 0.973605, 2.319841 }
C.pos.heroics[3] = { 0.150151, 0.973605, 2.330439 }
C.pos.heroics[4] = { 2.131843, 0.973605, 2.330439 }
C.pos.heroics[5] = { 4.145326, 0.973605, 2.309244 }
C.pos.heroics[6] = { 6.158812, 0.973605, 2.319841 }
C.pos.myst_rune = { 8.773835, 0.96, 6.248213 }
C.rot.myst_rune = { 0, 270, 0 }

--[[ Game is loading. ]]
function onLoad(saved_data)
  log("Mercurial version " .. env.version .. " loading")
  local dice_bag = getObjectFromGUID(C.guids.dice_bag)
  dice_bag.interactable = false
  dice_bag.setInvisibleTo(Player.getColors())
  for i=1,4 do
    local bar = getObjectFromGUID(C.guids.color_bars[i])
    if bar ~= nil then
      bar.interactable = false
      bar.UI.setAttribute("block_text_id", "text", "")
      bar.setInvisibleTo(Player.getColors())
    end
  end
  GD = {}
  if saved_data ~= "" then
    if env.test.trace then log("Global onLoad(): Saved load") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data
    restoreGameState()
  else
    if env.test.trace then log("Global onLoad(): Fresh load") end
    GD.states = {}
    GD.states.UI = {}
    GD.states.obj_vis = {}
    GD.game = {}
    GD.game.started = false
    GD.game.spells_deck_guid = C.guids.spell_deck
    GD.game.alterations_deck_guid = C.guids.alterations_deck
    GD.game.heroics_deck_guid = C.guids.heroics_deck
    GD.game.artifacts_deck_guid = C.guids.artifacts_deck
    GD.game.players = {}
    GD.game.positions = {}
    for i=1,4 do
      GD.game.positions[i] = ""
    end
    if not(env.test.in_dev) then
      --TODO??
    end
    getObjectFromGUID(C.guids.spell_deck).shuffle()
    getObjectFromGUID(C.guids.alterations_deck).shuffle()
    getObjectFromGUID(C.guids.heroics_deck).shuffle()
    getObjectFromGUID(C.guids.artifacts_deck).shuffle()
    UI_setAttribute("startPanel", "active", true)
    local btn = getObjectFromGUID(C.guids.fill_alterations_btn)
    setInvisibleTo(btn.getGUID(), Player.getColors())
    btn = getObjectFromGUID(C.guids.fill_spells_btn)
    setInvisibleTo(btn.getGUID(), Player.getColors())
    
  end
  math.randomseed(os.time())
  --start the refill alterations watcher
  Timer.create({
    identifier     = "Alterations_watcher",
    function_name  = "checkFillBtns",
    delay          = 2,
    repetitions    = 0,
  })
end

--[[ Wrapper function for saving obj visiblity for game restore. ]]
function setInvisibleTo(guid, colors)
  if env.test.trace then log("setInvisibleTo(): "..guid) end
  assert(type(guid) == 'string', "guid must be a string")
  assert(colors)
  getObjectFromGUID(guid).setInvisibleTo(colors)
  GD.states.obj_vis[guid] = colors
end
  
--[[  Wrapper function for saving UI attributes for game restore. ]]
function UI_setAttribute(id, field, value)
  if env.test.trace and env.game.verbose then log("UI_setAttribute()") end
  assert(type(id) == "string", "id must be a string")
  assert(type(field) == "string", "field must be a string")
  UI.setAttribute(id, field, value)
  GD.states.UI[id..":"..field] = value
end
  
--[[ Save game state ]]
function onSave()
  local data_to_save = GD
  local saved_data = JSON.encode(data_to_save)
  if env.test.force_fresh_save then
    saved_data = ""
  end
  return saved_data
end

--[[ Restore game state from saved load. ]]
function restoreGameState()
  if env.test.trace then log("restoreGameState()") end
  --restore object visiblity
  for g,colors in pairs(GD.states.obj_vis) do
    local obj = getObjectFromGUID(g)
    if obj then obj.setInvisibleTo(colors) end
  end
  --restore UI state
  for key,value in pairs(GD.states.UI) do
    local id = Split(key, ':')[1]
    local field = Split(key, ':')[2]
    UI.setAttribute(id, field, value)
  end
end

--[[ Button handler for "Start Game".  Setup player order and
    enable class board selection. ]]
function startGameBtn()
  UI_setAttribute("startPanel", "active", false)
  GD.game.player_order = {}
  GD.game.players = {}
  local seated = getSeatedPlayers()
  if(env.test.test_players) then
    seated = env.test.test_players
  end
  --getSeatedPlayers() is random, use table order
  for _,pcol in ipairs(env.game.player_table_order) do
    if contains(seated, pcol) then
      GD.game.players[pcol] = {}
      table.insert(GD.game.player_order, pcol)
    end
  end
  GD.game.player_count = #GD.game.player_order
  GD.game.start_player = math.random(1, #GD.game.player_order)
  GD.game.current_player = GD.game.start_player
  if (math.random(1, 10) > 5) then
    GD.game.myst_rune = C.guids.myst_rune_1
  else
    GD.game.myst_rune = C.guids.myst_rune_2
  end
  if env.game.verbose then 
    local order = GD.game.player_order[GD.game.start_player]
    local p = GD.game.start_player
    for i=1, #GD.game.player_order - 1 do
      p = p + 1
      if p > #GD.game.player_order then p = 1 end
      order = order .. ", " .. GD.game.player_order[p]
    end
    print("Player order is " .. order)
  end
  -- Enable class select buttons
  for class, guid in pairs(C.guids.player_boards) do
    local class_board = getObjectFromGUID(guid)
    assert(class_board)
    --class_board.call("enableClassSelectBtn")
    class_board.interactable = true
    class_board.setLock(false)
  end
  GD.game.assigned_boards_count = 0
  broadcastToAll("In reverse player order choose and place one mage class to complete setup.")
end

--[[ Called from player board on class select.
    If player is unnassigned, set associations to player board.
    Otherwise show error message and return with no action.
    Calls back to player board to finish setup if successful. ]]
function setPlayerClass(params)  
  if env.test.trace then log("Global: setPlayerClass()") end
  assert(params.player, "parameter 'player' missing")
  assert(params.guid, "parameter 'guid' missing")
  assert(params.position, "parameter 'position' missing")
  local position = params.position
  local pcol = params.player
  if not(contains(GD.game.player_order, pcol)) then
    broadcastToAll("Player " .. pcol .. " is not a player in this game.")
    return
  elseif GD.game.players[pcol].class then
    broadcastToColor("Player " .. pcol .. " cannot select a second class.", pcol)
    return
  elseif GD.game.positions[position] ~= "" then
    broadcastToAll("Player position "..position.." already taken.")
    return
  else
    local class_board = getObjectFromGUID(params.guid)
    assert(class_board)
    if env.game.verbose then print("Player " .. pcol .. " selected class " .. class_board.getName()) end
    GD.game.positions[position] = pcol
    GD.game.players[pcol].class = class_board.getName()
    GD.game.players[pcol].board_guid = class_board.getGUID()
    --complete player assignment in board
    class_board.call("setPlayer", {["player"]=pcol, ["position"]=position})  
    GD.game.assigned_boards_count = GD.game.assigned_boards_count + 1
  end
  --If all players assigned to boards, do final setup    
  if GD.game.assigned_boards_count == GD.game.player_count then finalSetup() end
end

--[[ Final game setup after all players have selected a class. ]]
function finalSetup()
  if env.test.trace then log("Global: finalSetup()") end
  --cleanup unused boards
  for _,guid in pairs(C.guids.player_boards) do
    getObjectFromGUID(guid).call("setupBoard")
  end  
  for i=1,4 do
    if GD.game.positions[i] == "" then
      getObjectFromGUID(C.guids.color_bars[i]).destruct()
    end
    local zone =getObjectFromGUID(C.guids.board_zones[i])
    if zone ~= nil then zone.destruct() end
  end
  --deal out starting cards
  local p = {
    ["position"] = {},
    ["flip"] = true,
    ["top"] = true,
    ["smooth"] = true
  }
  local deck = getObjectFromGUID(C.guids.spell_deck)
  for i=01,6 do 
    p.position = C.pos.spells[i]
    deck.takeObject(p)
  end
  deck = getObjectFromGUID(C.guids.alterations_deck)
  for i=1,6 do  
    p.position = C.pos.alterations[i]
    deck.takeObject(p)
  end
  local card = 1
  Wait.time(function() 
    if card > 6 then return end -- safety
    placeHeroic(Vector(C.pos.heroics[card]), 1)
    card = card + 1
  end, .25, 6)
 -- Place acuity on alterations per player count
 local acuity_bag = getObjectFromGUID(C.guids.acuity_bag)
  for i=1, GD.game.player_count do
    local pos = Vector(C.pos.alterations[i])  
    pos.y = pos.y + 1
    acuity_bag.takeObject({ callback_function = function(obj) obj.setPositionSmooth(pos, false, false) end }) 
  end
  -- Place the previously random selected myst rune (if Mystcaller not taken)
  local mystcaller = false
  for _,p in pairs(GD.game.players) do
    if p.class == "Mystcaller" then mystcaller = true end
  end
  if not(mystcaller) then
    local myst_rune = getObjectFromGUID(GD.game.myst_rune)
    myst_rune.setPositionSmooth(C.pos.myst_rune)
    myst_rune.setRotation(C.rot.myst_rune)
  end

  -- Random flip arcanas
  for g,data in pairs(C.arcanas) do
    log("random flip arcana "..g)
    local arcana = getObjectFromGUID(g)
    if (math.random(1, 10) > 5) then arcana.flip() end
    Wait.condition(
      function()
        if arcana.is_face_down then 
          arcana.setName(data.face_down.name)
        else 
          arcana.setName(data.face_up.name)
        end
      end,
      function() return arcana.resting end
    )
  end

  -- Give extra acuity to players in turn order 
  local player = GD.game.start_player 
  local count = 1
  Wait.time(
    function()
      player = player + 1
      if player > GD.game.player_count then player = 1 end --wrap around
      player_color = GD.game.player_order[player]
      if env.game.verbose then print("Dealing " .. count .. " extra acuity to player " .. count+1 .. " - " .. player_color) end
      local board = getObjectFromGUID(GD.game.players[player_color].board_guid)
      board.call("dealItems", {["item_type"]="acuity",["amount"]=count})
      count = count + 1
    end, 
    .5, 
    GD.game.player_count-1
  )
  local pcol = GD.game.player_order[GD.game.current_player]
  local board = getObjectFromGUID(GD.game.players[pcol].board_guid)
  board.call("enableActivePlayer")
  if env.game.verbose then print("Active player is " .. GD.game.player_order[GD.game.current_player]) end
  
  --Configure final scoring table for number of players
  local num_players = #GD.game.player_order
  for i=1,4 do
    if i > num_players then
      UI_setAttribute("score_table_row_"..tostring(i), "active", "false") 
    end
  end
  local table_size = 360 - ((4 - num_players) * 55)
  UI_setAttribute("score_panel", "height", tostring(table_size))

  --done with final setup
  GD.game.started = true
end

--[[ Place a heroic card and the bonus bits on it.
    Recursive to add delay for placing bits.   --]]  --TODO: think about using obj.resting in wait condition
function placeHeroic(location, iteration)
  if iteration > 4 then return end
  local acuity_bag = getObjectFromGUID(C.guids.acuity_bag)
  local mana_bag = getObjectFromGUID(C.guids.mana_bag)
  local pos = Vector(location)
  if iteration == 1 then
    getObjectFromGUID(C.guids.heroics_deck).takeObject({
      ["position"] = pos,
      ["flip"] = true,
      ["top"] = true,
      ["smooth"] = false
    })
  elseif iteration == 2 then
    pos.y = 1
    mana_bag.takeObject({ callback_function = function(obj) obj.setPositionSmooth(pos, false, false) end })
  elseif iteration == 3 then
    pos.y = 2
    pos.z = pos.z - 0.5
    acuity_bag.takeObject({ callback_function = function(obj) obj.setPositionSmooth(pos, false, false) end })
  elseif iteration == 4 then
    pos.y = 3
    pos.z = pos.z + 0.5
    acuity_bag.takeObject({ callback_function = function(obj) obj.setPositionSmooth(pos, false, false) end })
  end
  iteration = iteration + 1
  Wait.frames(function() placeHeroic(location, iteration) end, 10)
end  

--[[ Called from setNextPlayer (on turn "done") --]]
function refillCards()
  if env.test.trace then log("Global: refillCards()") end
  refillSpells()
  refillAlterations()
  refillHeroics()
end

--[[ Shift spell cards left to fill empty spaces, placing new cards in rightmost spot. --]]
function refillSpells()
  if env.test.trace then log("Global: refillSpells()") end
  local p = {
    origin       = {},
    direction    = {0,1,0},
    type         = 3,
    size         = {1,2,2},
    max_distance = 0,
    debug        = false,    
  }  
  local deck = getObjectFromGUID(C.guids.spell_deck)
  local spots = {}
  local empty_spots = 0
  for i=1,6 do  
    p.origin =  C.pos.spells[i]
    local hits = Physics.cast(p)
    local empty = true
    if hits ~= nil then
      for _,hit in ipairs(hits) do
        if hit.hit_object.tag ~= "Surface" then
          if hit.hit_object.hasTag("Spell") then
            spots[i] = hit.hit_object.getGUID()
            empty = false
          end
        end
      end
    end
    if empty then 
      spots[i] = "-"
      empty_spots = empty_spots + 1
    end
  end
  --recursively shift cards left into empty spots and fill last spot
  local function shift(empty_spots)
    for i=1,6 do
      if spots[i] == "-" then
        for j=i+1,6 do
          local pos = C.pos.spells[j-1]
          card = getObjectFromGUID(spots[j])
          if card ~= nil then 
            card.setPosition(pos)
            spots[j-1] = spots[j]
            spots[j] = "-"
          end
        end
      end
    end
    local card = deck.takeObject({
      ["position"] = C.pos.spells[6],
      ["flip"] = true,
      ["top"] = true,
      ["smooth"] = false
    })
    spots[6] = card.getGUID()
    empty_spots = empty_spots - 1
    if empty_spots > 0 then
      Wait.frames(function() shift(empty_spots) end, .5)
    end
  end
  if empty_spots > 0 then
    shift(empty_spots)
  end
end

--[[ Timer watchdog functions.  Timer started in onLoad(). 
    If any Alteration or Spell positions are empty, show fill button. 
    Otherwise hide buttons.  --]]
function checkFillBtns()
  checkFillSpells()
  checkFillAlterations()
end
function checkFillAlterations()
  if not(GD.game.started) then return end
  --log("checkFillAlterations()")
  local p = {
    origin       = {},
    direction    = {0,1,0},
    type         = 3,
    size         = {1,2,2},
    max_distance = 0,
    debug        = false,    
  }  
  local btn = getObjectFromGUID(C.guids.fill_alterations_btn)
  for i=1,6 do  
    p.origin =  C.pos.alterations[i]
    local hits = Physics.cast(p)
    local empty = true
    if hits ~= nil then
      for _,hit in ipairs(hits) do
        if hit.hit_object.tag ~= "Surface" then
          if hit.hit_object.hasTag("Alteration") then
            empty = false
          end
        end
      end
    end
    if empty then 
      btn.UI.setAttribute("button_panel", "active", "true")
      return
    end
  end
  btn.UI.setAttribute("button_panel", "active", "false")
end
function checkFillSpells()
  if not(GD.game.started) then return end
  --log("checkFillSpells()")
  local p = {
    origin       = {},
    direction    = {0,1,0},
    type         = 3,
    size         = {1,2,2},
    max_distance = 0,
    debug        = false,    
  }  
  local btn = getObjectFromGUID(C.guids.fill_spells_btn)
  for i=1,6 do  
    p.origin =  C.pos.spells[i]
    local hits = Physics.cast(p)
    local empty = true
    if hits ~= nil then
      for _,hit in ipairs(hits) do
        if hit.hit_object.tag ~= "Surface" then
          if hit.hit_object.hasTag("Spell") then
            empty = false
          end
        end
      end
    end
    if empty then 
      btn.UI.setAttribute("button_panel", "active", "true")
      return
    end
  end
  btn.UI.setAttribute("button_panel", "active", "false")
end

--[[ Handler for fill alterations button.   --]]
function refillAlterationsBtn(player, button, id)
  if env.test.trace then log("Global: refillAlterationsBtn() pressed by "..player.color) end
  local btn = getObjectFromGUID(C.guids.fill_alterations_btn)
  btn.UI.setAttribute("button_panel", "active", "false")
  refillAlterations()
end

--[[ Handler for fill spells button.   --]]
function refillSpellsBtn(player, button, id)
  if env.test.trace then log("Global: refillSpellsBtn() pressed by "..player.color) end
  local btn = getObjectFromGUID(C.guids.fill_spells_btn)
  btn.UI.setAttribute("button_panel", "active", "false")
  refillSpells()
end

--[[ Shift spell cards left to fill empty spaces, placing new cards in rightmost spot. 
    Move any acuity with cards.  If leftmost card was not taken, add acuity to it. --]]
function refillAlterations()
  if env.test.trace then log("Global: refillAlterations()") end
  local p = {
    origin       = {},
    direction    = {0,1,0},
    type         = 3,
    size         = {1,2,2},
    max_distance = 0,
    debug        = true,    
  }  
  local deck = getObjectFromGUID(C.guids.alterations_deck)
  local spots = {}
  local acuity = {}
  local empty_spots = 0
  for i=1,6 do  
    acuity[i] = {}
    p.origin =  C.pos.alterations[i]
    local hits = Physics.cast(p)
    local empty = true
    if hits ~= nil then
      for _,hit in ipairs(hits) do
        if hit.hit_object.tag ~= "Surface" then
          if hit.hit_object.hasTag("Alteration") then
            spots[i] = hit.hit_object.getGUID()
            empty = false
          elseif hit.hit_object.hasTag("Acuity") then
            table.insert(acuity[i], hit.hit_object.getGUID())
          end
        end
      end
    end
    if empty then 
      spots[i] = "-"
      empty_spots = empty_spots + 1
    end
  end
  --add acuity to left most spot if not empty and a card taken
  if spots[1] ~= "-" and empty_spots > 0 then 
    local bag = getObjectFromGUID(C.guids.acuity_bag)
    local pos = Vector(C.pos.alterations[1])  
    pos.y = pos.y + 3
    pos = scatter(pos, {1,0,1.5})
    bag.takeObject({ callback_function = function(obj) obj.setPositionSmooth(pos, false, false) end }) 
  end
  --recursively shift cards left into empty spots and fill last spot
  local function shift(empty_spots)
    for i=1,6 do  
      if spots[i] == "-" then
        for j=i+1,6 do
          local pos = C.pos.alterations[j-1]
          card = getObjectFromGUID(spots[j])
          if card ~= nil then 
            card.setPosition(pos)
            spots[j-1] = spots[j]
            spots[j] = "-"
            for _,g in ipairs(acuity[j]) do
              local o = getObjectFromGUID(g)
              local delta_x = C.pos.alterations[j][1] - C.pos.alterations[j-1][1]
              local o_pos = o.getPosition()
              o_pos.x = o_pos.x - delta_x
              log(o_pos)
              o.setPositionSmooth(o_pos, false, true)
              table.insert(acuity[j-1], g)
            end
            acuity[j] = {} 
          end
        end
      end
    end
    local card = deck.takeObject({
      ["position"] = C.pos.alterations[6],
      ["flip"] = true,
      ["top"] = true,
      ["smooth"] = false
    })
    spots[6] = card.getGUID()
    empty_spots = empty_spots - 1
    if empty_spots > 0 then
      Wait.time(function() shift(empty_spots) end, .5)
    end
  end
  if empty_spots > 0 then
    shift(empty_spots)
  end
end

--[[ Refill the Heroics card positions. --]]
function refillHeroics()
  if env.test.trace then log("Global: refillHeroics()") end
  local p = {
    origin       = {},
    direction    = {0,1,0},
    type         = 3,
    size         = {1,2,2},
    max_distance = 0,
    debug        = false,    
  }  
  local deck = getObjectFromGUID(C.guids.heroics_deck)
  local empty_spots = {}
  for i=1,6 do  
    p.origin =  C.pos.heroics[i]
    local hits = Physics.cast(p)
    local empty = true
    if hits ~= nil then
      for _,hit in ipairs(hits) do
        if hit.hit_object.tag ~= "Surface" then
          if hit.hit_object.hasTag("Heroic") then empty = false end
        end
      end
    end
    if empty then  table.insert(empty_spots, C.pos.heroics[i]) end
  end
  --fill the spot(s).  Recursive to add delay between.
  local function fillSpot()
    if empty_spots[1] == nil then return end 
    placeHeroic(Vector(empty_spots[1]), 1)
    table.remove(empty_spots, 1)
    Wait.time(function() fillSpot() end, .5)    
  end
  if #empty_spots > 0 then
    fillSpot()
  end
end

--[[ Set the next player in player_order.  
  Wraps to first player if last is current. ]]
function setNextPlayer()
  if env.test.trace then log("Global: setNextPlayer()") end
  if GD.game.current_player == #GD.game.player_order then
    GD.game.current_player = 1
  else
    GD.game.current_player = GD.game.current_player + 1
  end
  refillCards()
  local pcol = GD.game.player_order[GD.game.current_player]
  local board = getObjectFromGUID(GD.game.players[pcol].board_guid)
  board.call("enableActivePlayer")
  if env.game.verbose then print("Active player is " .. GD.game.player_order[GD.game.current_player]) end
end

--[[ Special case needed by Mystcaller board only. ]]
function getMystRuneGuid()
  return GD.game.myst_rune
end

--[[ Used by player boards during scoring --]]
function getPlayerCount()
  return #GD.game.player_order
end

--[[ Return player class board guid. --]]
function getPlayerClassBoardGUID(params)
  assert(params)
  local pdata = GD.game.players[params.player_color]
  if pdata ~= nil then
    return pdata.board_guid
  else
    log("Global: ERROR: unable to get player data")
    return ""
  end
end

--[[ Handle objects dropped in game.  Only certain object tags supported.  --]]
function onObjectDrop(player_color, obj)
  if GD.game.started then
    if obj.hasTag("Spell") then
      local g = GD.game.players[player_color].board_guid
      local board = getObjectFromGUID(g)
      board.call("spellDrop", {["guid"]=obj.getGUID()})
    elseif obj.hasTag("Acuity") then
      local g = GD.game.players[player_color].board_guid
      local board = getObjectFromGUID(g)
      board.call("acuityDrop", {["guid"]=obj.getGUID()})
    end
  end
end

--[[ Handle objects picked up in game.  Only certain object tags supported.  --]]
function onObjectPickUp(player_color, obj)
  if GD.game.started then
    if obj.hasTag("Spell") then
      -- Clear any decals and buttons on a spell card when picked up
      if obj.getDecals() ~= nil then
        obj.setDecals({})
      end
      if obj.getButtons() ~= nil then
        obj.clearButtons()
      end
    end
  end
end

--[[ Final game scoring.
  tiebreaker: first #arcanas, then #spells --]]
function finalScore()
  if env.test.trace then log("Global: finalScore()") end
  local scores = {}
  for color,pinfo in pairs(GD.game.players) do
    local pdata = {}
    pdata.player = color
    pdata.class = pinfo.class
    local board = getObjectFromGUID(pinfo.board_guid)
    board.call("updateScore", {})
    local bd=board.getTable("GD")
    local values = bd.board.scoring.values
    pdata.total = 0
    pdata.heroics = values.heroics
    pdata.total = pdata.total + values.heroics
    pdata.sigils = values.sigils
    pdata.total = pdata.total + values.sigils
    pdata.prestige = values.prestige
    pdata.total = pdata.total + values.prestige
    pdata.arcanas = values.arcanas
    pdata.total = pdata.total + values.arcanas
    pdata.num_arcanas = sizeOf(bd.board.scoring.arcanas)
    pdata.num_spells = sizeOf(bd.board.scoring.spells)
    local new_data = simpleDeepCopy(pdata)
    if #scores == 0 then
      table.insert(scores, new_data)
    else
      local found = false
      for i=1,#scores do
        if new_data.total > scores[i].total then
          table.insert(scores, i, new_data)
          found = true
          break
        elseif new_data.total == scores[i].total then
          --first tie breaker
          if new_data.num_arcanas > scores[i].num_arcanas then
            print(new_data.player.." wins 1st tie breaker with "..scores[i].player.." on #arcanas")
            table.insert(scores, i, new_data)
            found = true
            break
          elseif new_data.num_arcanas == scores[i].num_arcanas then
            --second tie breaker
            if new_data.num_spells > scores[i].num_spells then
              print(new_data.player.." wins 2nd tie breaker with "..scores[i].player.." on #spells")
              table.insert(scores, i, new_data)
              found = true
              break
            else
              print(new_data.player.." and "..scores[i].player.." still tied after all tie breakers.")
            end
          end
        end
      end
      if not(found) then
        table.insert(scores, #scores + 1, new_data)
      end
    end
  end
  --update the score display and show it
  log("score:")
  log(scores)
  local i = 1
  for _,data in ipairs(scores) do
    UI_setAttribute("score_table_row_"..tostring(i).."_text_1", "text", data.player)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_2", "text", data.class)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_3", "text", data.heroics)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_4", "text", data.sigils)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_5", "text", data.prestige)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_6", "text", data.arcanas)
    UI_setAttribute("score_table_row_"..tostring(i).."_text_7", "text", data.total)
    i = i + 1
  end
  broadcastToAll(scores[1].player.." wins the game!!!")
  UI_setAttribute("score_panel", "active", true)
end

--[[ ******** UTILITY ******** --]]

--[[ Get obj position (DEVELOPMENT ONLY) ]]
function savePosition(g)
  local o = getObjectFromGUID(g)
  Notes.setNotes(tostring(o.getPosition()))
end

--[[ Get obj rotation (DEVELOPMENT ONLY) ]]
  function saveRotation(g)
  local o = getObjectFromGUID(g)
  Notes.setNotes(tostring(o.getRotation()))
end

require("tts-lib/utils")
